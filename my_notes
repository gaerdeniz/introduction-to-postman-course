API= Interface of a server with data in it or connected to an action (https://www.youtube.com/watch?v=VywxIQ2ZXw4)
GET
Parametres= additional data to submit the request. for some apis they are mandatory
          keys come before ?, in relation to category(books). after that, we can also filter it through value. 
          f.e= {{baseURL}}/books?available=true---> we are looking for books that's key= available and value of the key=true
Multiple parametres. each parametre connect to other with &
          fe= {{baseURL}}/books?available=false&type=non-fiction
Lesson 9= Path parametres/variables are different than query parametres. path= baseurl/:pp
           you can send query params empty, but you can't send path parametres empty, if it is included in the request. 
           path parametres doesn't show up in the url
POST
Posting means registering, and in the most cases(unless it's a public API) we need authorization to register things. This also may occur in different commands like delete etc.
For registration= baseurl/api-clients---> body-->raw--->json. implement the information given in the API document. Result: getting a token to access.
We need to enter this token to "Authorization" part. 

TEST AUTOMATION 
Under the part we write urls, there is a test section where we can utilize from snippets instead of writing a code. We can test multiple script at once.
To get status results written in json(bec they are normally in Javascript), you need to include sending this in the script section: const response = pm.response.json(); console.log(response);
To get only 'OK' in status in console(json language), you should send the script like this: const response = pm.response.json(); console.log(response.status);
*Testing without snippet codes---> pm.test("f.e: Status should be OK"), function() { pm.expect().to.eql() }
variables: https://learning.postman.com/docs/sending-requests/variables/
Test cases and functions: https://www.softwaretestingmaterial.com/api-test-cases-in-postman-using-javascript/
pm.test---> a-must parameter to use while testing
pm.expect()---> assertion function makes it easy to write readable tests, and we can deal with assertions of data from a response or variables. f.e= pm.test("environment to be production", function () { pm.expect(pm.environment.get("env")).to.equal("production"); });
pm.response.to.be---> object provides tests for response status types and body variations. f.e= pm.test("response is ok", function () { pm.response.to.have.status(200); });
